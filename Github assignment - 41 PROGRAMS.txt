1. Write a program which will take a string as input and convert it into other primitive data types.

package project40;

public class Typecasting {
	public static void main(String args[]) {
		System.out.println("Implicit TypeCasting");
		char a='A';
		System.out.println("a: "+a);
		
		int b=a;
		System.out.println("b: "+b);
		
		float c=a;
		System.out.println("c: "+c);
		
		long d=a;
		System.out.println("d: "+d);
		
		double e=a;
		System.out.println("e: "+e);
		
				
		System.out.println("\n");
		
		System.out.println("Explicit TypeCasting");
		
		double x= 50;
		int y=(int)x;
		System.out.println("x: "+x);
		System.out.println("y: "+y);
		
	}
}

2. Write a program to demonstrate how and when access modifiers are used.

package project40;

public class Accessmodifiers{
		
			  void display() 
			     { 
			         System.out.println("default access specifier"); 
			     } 
			} 

		 class accessSpecifiers1 {

				public static void main(String[] args) {
					
					System.out.println("Default Access Specifier");
					Accessmodifiers obj = new Accessmodifiers(); 		  
			        obj.display(); 

				}
			}
		 class preaccessspecifier 
		 { 
		    private void display() 
		     { 
		         System.out.println("You are using private access specifier"); 
		     } 
		 } 

		 class accessSpecifiers2 {

		 	public static void main(String[] args) {
		 		System.out.println("Private Access Specifier");
		 		preaccessspecifier  obj = new preaccessspecifier(); 
		         

		 	}
		 }

		 class preaccessspecifiers {

		 	protected void display() 
		     { 
		         System.out.println("This is protected access specifier"); 
		     } 
		 }
		 class accessSpecifiers4 {

				public static void main(String[] args) {
					
					preaccessspecifiers obj = new preaccessspecifiers(); 
			        obj.display();  
					
				}
			}

3.As a developer, write a program to create an arithmetic calculator.
package project40;
import java.util.Scanner;

public class ArithmeticCalculator {
public static void main(String args[]) {
	char c;
    Double n1, n2, output;

    
    Scanner sc = new Scanner(System.in);

    
    System.out.println("Choose an operator: +, -, *, or /");
    c = sc.next().charAt(0);

    System.out.println("Enter first number");
    n1 = sc.nextDouble();

    System.out.println("Enter second number");
    n2 = sc.nextDouble();

    switch (c) {

  
      case '+':
        output = n1 + n2;
        System.out.println(n1 + " + " + n2 + " = " + output);
        break;

      
      case '-':
        output = n1 - n2;
        System.out.println(n1 + " - " + n2 + " = " + output);
        break;

      
      case '*':
        output = n1 * n2;
        System.out.println(n1 + " * " + n2 + " = " + output);
        break;

      
      case '/':
        output = n1 / n2;
        System.out.println(n1 + " / " + n2 + " = " + output);
        break;

      default:
        System.out.println("Invalid operator!");
        break;
    }

    sc.close();
  }
}

4.Write a program to demonstrate different methods of different return types.
package project40;

public class Methods1 {

		public int multipynumbers(int a,int b) {
			int c=a*b;
			return c;
		}

		public static void main(String[] args) {

			Methods1 m= new Methods1();
			int output= m.multipynumbers(10,3);
			System.out.println("Multipilcation is :"+output);
			}

		public class callMethod {

		int val=150;

		int operation(int val) {
			val =val*10/100;
			return(val);
		}

		public void main(String args[]) {
			callMethod cm = new callMethod();
			System.out.println("Before operation value of data is "+cm.val);
			cm.operation(100);
			System.out.println("After operation value of data is "+cm.val);
			}
		}
		




		public  class overloadMethod {
			
		public void area(int b,int h) {
 System.out.println("Area of Triangle : "+(0.5*b*h));
		}
		    
		    public void area(int r) {
		         System.out.println("Area of Circle : "+(3.14*r*r));
		    }

		    public void main(String args[])
		   {

		overloadMethod ob=new overloadMethod();
		       ob.area(10,12);
		       ob.area(5);  
		   }
		}
}


5.Write a program to demonstrate the uses of constructors and its types.
package project40;

public class Constructors {
		int id;
		String name;
	

	void display() {
		System.out.println(id+" "+name);
		}
	}

	 class ConstructorsDemo {

	public static void main(String[] args) {

		Constructors emp1=new Constructors();
		Constructors emp2=new Constructors();

		emp1.display();
		emp2.display();
		}
	}


	class Std{
		int id;
		String name;

		Std(int i,String n)
		{
		id=i;
		name=n;
		}

		void display() {
		System.out.println(id+" "+name);
		}
	}

	 class parameterizedConstrsuctorDemo {
	public static void main(String[] args) {

		Std std1=new Std(2,"Alex");
		Std std2=new Std(10,"Annie");
		std1.display();
		std2.display();
			}
	}



6.Write a program to demonstrate the uses of collections and its types.
package project40;
import java.util.*;

public class Collections {

		public static void main(String[] args) {
			
			System.out.println("ArrayList");
			ArrayList<String> city=new ArrayList<String>();   
		      city.add("Chennai");
		      city.add("Bombay");    	   
		      System.out.println(city);  
			
			
		      System.out.println("\n");
		      System.out.println("Vector");
		      Vector<Integer> vec = new Vector();
		      vec.addElement(10); 
		      vec.addElement(20); 
		      System.out.println(vec);
			
			
		      System.out.println("\n");
		      System.out.println("LinkedList");
		      LinkedList<String> names=new LinkedList<String>();  
		      names.add("Alice");  
		      names.add("Jack");  	      
		      Iterator<String> itr=names.iterator();  
		      while(itr.hasNext()){  
		       System.out.println(itr.next());  
		       
		       
		       System.out.println("\n");
		       System.out.println("HashSet");
		       HashSet<Integer> set=new HashSet<Integer>();  
		       set.add(100);  
		       set.add(110);  
		       set.add(120);
		       set.add(130);
		       System.out.println(set);
		       
		       
		       System.out.println("\n");
		       System.out.println("LinkedHashSet");
		       LinkedHashSet<Integer> set2=new LinkedHashSet<Integer>();  
		       set2.add(10);  
		       set2.add(20);  
		       set2.add(30);
		       set2.add(40);	       
		       System.out.println(set2);
		      	} 
		      }  
		}



7.Write a program to demonstrate the uses of Map.
package project40;
import java.util.*;
import java.util.Map;

public class Map1 {
	    public static void main(String args[])
	    {
	      
	        Map<String, Integer> hm
	            = new HashMap<String, Integer>();
	 
	        // Inserting pairs in above Map
	        // using put() method
	        hm.put("map:a", new Integer(120));
	        hm.put("map:b", new Integer(286));
	        hm.put("map:c", new Integer(345));
	        hm.put("map:d", new Integer(450));
	 
	        // Traversing through Map using for-each loop
	        for (Map.Entry<String, Integer> me :
	             hm.entrySet()) {
	 
	            // Printing keys
	            System.out.print(me.getKey() + ":");
	            System.out.println(me.getValue());
	        }
	    }

}
8. Write a program to demonstrate the working of inner classes.
package project40;

public class InnerClass1 {

	    class Inner {

	        public void show()
	        {

	            System.out.println("nested class");
	        }
	    }
	}
	 

	class Main {
	 
	  
	    public static void main(String[] args)
	    {
	 
	       
	        InnerClass1.Inner i = new InnerClass1().new Inner();
	 
	       
	        i.show();
	    }
	}

9.Write a program to create strings and display the conversion of string to StringBuffer and StringBuilder.

package project40;

public class Strings {

		public static void main(String[] args) {
	
			System.out.println("String methods");
			
			String str=new String("Hello");
			System.out.println(str.length());

			
			String sub=new String("Welcome");
			System.out.println(sub.substring(2));

		
			String s1="Hello1";
			String s2="Hello2";
			System.out.println(s1.compareTo(s2));

			
			String s4="";
			System.out.println(s4.isEmpty());

			
			String s5="Hello1";
			System.out.println(s1.toLowerCase());
			
			
			String s6="Hello2";
			String replace=s2.replace('d', 'l');
			System.out.println(replace);

			
			String x="Welcome";
			String y="WeLcOmE";
			System.out.println(x.equals(y));
	 
			System.out.println("\n");
			System.out.println("Creation of StringBuffer");
			StringBuffer s=new StringBuffer("Welcome to Java!");
			s.append("Enjoy your learning");
			System.out.println(s);

			
			s.insert(0, 'w');
			System.out.println(s);

		
			StringBuffer sb=new StringBuffer("Hello");
			sb.replace(0, 2, "hi");
			System.out.println(sb);

		
			sb.delete(0, 1);
			System.out.println(sb);
			
		
			System.out.println("\n");
System.out.println("Creation of StringBuilder");
			StringBuilder sb1=new StringBuilder("Happy");
			sb1.append("Learning");
			System.out.println(sb1);

			System.out.println(sb1.delete(0, 1));

			System.out.println(sb1.insert(1, "Welcome"));

			System.out.println(sb1.reverse());
					
			
			System.out.println("\n");
			System.out.println("Conversion of Strings to StringBuffer and StringBuilder");
			
			String str1 = "Hello"; 
	        
	     
	        StringBuffer sbr = new StringBuffer(str1); 
	        sbr.reverse(); 
	        System.out.println("String to StringBuffer");
	        System.out.println(sbr); 
	          
	        
	        StringBuilder sbl = new StringBuilder(str1); 
	        sbl.append("world"); 
	        System.out.println("String to StringBuilder");
	        System.out.println(sbl);              		
		}
	}

10.Write a program to create single-dimensional and multidimensional arrays.
package project40;

public class Arrays {

		public static void main(String[] args) {
		int a1[]= {10,20,30,40,50};
		for(int i=0;i<5;i++) {
		System.out.println("Elements of array a: "+a1[i]);
		}

		
		int[][] b1 = {
		            {2, 4, 6, 8}, 
		            {3, 6, 9} };
		      
		      System.out.println("\nLength of row 1: " + b1[0].length);
		      }


}

11. Write a program to search a specific string from the given set of strings using regular expressions.
package project40;
import java.util.regex.*;

public class RegularExpressions{ 

	public static void main(String[] args) {

		String pattern = "[h-z]+";
		String check = "Expressions";
		Pattern p = Pattern.compile(pattern);
		Matcher c = p.matcher(check);
		
		while (c.find())
	      	System.out.println( check.substring( c.start(), c.end() ) );
		}
	}


12. Write a program to search a string entered by a user from the array of strings.

package project40;
import java.util.Arrays;
import java.lang.*;

public class FindString {
		public static void main(String[] args) {
		String[] str = { "R", "S", "T" };
		boolean found = false;
		int index = 0;
		String s = "S";
		for (int i = 0; i < str.length; i++) {
		if(s.equals(str[i])) {
		index = i; found = true; 
		break;
		}
		}
		if(found)
		System.out.println(s +" index "+index);
		else
		System.out.println(s +" not found in array");
		}
		}

13. You are given a project to demonstrate the implementation of thread creation mechanisms.

 class MultithreadingDemo extends Thread {
    public void run()
    {
        try {
            // Displaying the thread that is running
            System.out.println(
                "Thread " + Thread.currentThread().getId()
                + " is running");
        }
        catch (Exception e) {
            // Throwing an exception
            System.out.println("Exception is caught");
        }
    }
}
 
// Main Class
public class Multithread {
    public static void main(String[] args)
    {
        int n = 8; // Number of threads
        for (int i = 0; i < n; i++) {
            MultithreadingDemo object
                = new MultithreadingDemo();
            object.start();
        }
    }
}

14. You are given a project to demonstrate the execution of sleep(), wait(), and its uses in the threading concept.

package project40;

public class Sleep {

	    private static Object LOCK = new Object();
	    public static void main(String args[]) throws InterruptedException
	    {
	        Thread.sleep(1000);
	        System.out.println("Thread '" + Thread.currentThread().getName() + "' is awake after sleeping for 1 second");
	        synchronized (LOCK) 
	        {
	            LOCK.wait(1000);
	            System.out.println("Object '" + LOCK + "' is awake after" + " waiting for 1 second");
	        }
	    }
	}


15. You are given a project to demonstrate the multithreading with and without synchronization.

package project40;
import java.io.*; 
import java.util.*; 

 public class ThreadSynchronisation {
	 
	    public void send(String msg) 
	    { 
	        System.out.println("Send\t"  + msg ); 
	        try
	        { 
	            Thread.sleep(1000); 
	        } 
	        catch (Exception e) 
	        { 
	            System.out.println("Thread  interrupted."); 
	        } 
	        System.out.println("\n" + msg + "Sent"); 
	    } 
	} 
	class ThreadedSend extends Thread 
	{ 
	    private String msg; 
	    private Thread t; 
	    ThreadSynchronisation  sender; 
	    ThreadedSend(String m, ThreadSynchronisation obj) 
	    { 
	        msg = m; 
	        sender = obj; 
	    } 
	  
	    public void run() 
	    {  
	        synchronized(sender) 
	        { 
	            sender.send(msg); 
	        } 
	    } 
	} 
	class SyncDemo 
	{ 
	    public static void main(String args[]) 
	    { 
	        ThreadSynchronisation snd = new ThreadSynchronisation(); 
	        ThreadedSend S1 = 
	            new ThreadedSend( " Hi " , snd ); 
	        ThreadedSend S2 = 
	            new ThreadedSend( " Bye " , snd ); 
	        S1.start(); 
	        S2.start(); 
	        try
	        { 
	            S1.join(); 
	            S2.join(); 
	        } 
	        catch(Exception e) 
	        { 
	            System.out.println("Interrupted"); 
	        } 
	    } 
	} 


16. "You are given a project to demonstrate the uses of try-catch blocks in Java.

package project40;

public class TryCatch1 {
		  
	    public static void main(String[] args) {  
	        try  
	        {  
	        int data=35/0;  
	        }  
	  
	        catch(ArithmeticException a)  
	        {  
	            System.out.println(a);  
	        }  
	        System.out.println("code");  
	    }  
	      
	}  


17. You are given a project to demonstrate the uses of the throws, throw, finally, and custom exceptions in Java.
TRY, CATCH AND FINALLY:
public class MyClass 
{
    public static void main(String args[]) 
    {
        int[] array = new int[3];
        try 
        {
            array[7] = 3;
        }
        catch (ArrayIndexOutOfBoundsException e) 
        {
            System.out.println("Array index is out of bounds!"); 
        }
        finally 
        {
            System.out.println("The array is of size " + array.length);
        }
    }
}
 THROWS AND THROW:
package project40;

public class Throw {  
	    public static void validate(int age) {  
	        if(age<18) {  
	         
	            throw new ArithmeticException("Person is not eligible to vote");    
	        }  
	        else {  
	            System.out.println("Person is eligible to vote!!");  
	        }  
	    }
	    public static void main(String args[]){  
	        
	        validate(13);  
	        System.out.println("rest of the code...");    
	  }    
	}    

18.  CUSTOM:

package project40;

public class Custom extends Exception{
	
	    public Custom (String s)  
	    {  
	         
	        super(s);  
	    }  
	}  
	    
	 class CustomException  
	{  

	    static void validate (int age) throws Custom{    
	       if(age < 18){  
	  
	        
	        throw new Custom("not valid to vote");    
	    }  
	       else {   
	        System.out.println("welcome to vote");   
	        }   
	     }    
	   
	    public static void main(String args[])  
	    {  
	        try  
	        {  
	             
	            validate(13);  
	        }  
	        catch (Custom c)  
	        {  
	            System.out.println("exception is analysed");  
	    
	             
	            System.out.println("Exception occured: " + c);  
	        }  
	  
	        System.out.println("code");    
	    }  
	}  

19.  You are given a project to demonstrate a program implementing the concept of exception handling available in Java and the custom exception handlers.

     

package project40;

public class ExceptionHandlers extends Exception{
		   String s1;
		   ExceptionHandlers(String s2) {
			s1 = s2;
		   }
		   public String toString(){ 
			return ("Exception Occurred: "+s1) ;
		   }
		}
		 class Example{
		   public static void main(String args[]){
			try{
				System.out.println("try block");
				
				throw new ExceptionHandlers("error Message");
			}
			catch(ExceptionHandlers e){
				System.out.println("Catch Block") ;
				System.out.println(e) ;
			}
		   }
		}



20. You are given a project to demonstrate the create, read, update, and delete operations on the files in Java.
 
CREATE:
package project40;
import java.io.File;

public class Create {
	
	               public static void main(String args[]) {  
	               try {  
	              
	                       File f = new File("FileOperation.txt");   
	                       if (f.createNewFile()) {  
	                                  System.out.println("File " + f.getName() + " is created.");  
	                       } else {  
	                                  System.out.println("File already exists.");  
	                       }  
	                     } catch (Exception e) {  
	                              System.out.println("error.");  
	                              e.printStackTrace();  
	                  }   
	        }  
	}  
	
READ:

package project40;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Read {
	
	    public static void main(String[] args) {  
	        try {  
	              
	            File f = new File("FileOperation.txt");    
	            Scanner sc = new Scanner(f);  
	            while (sc.hasNextLine()) {  
	                String s = sc.nextLine();  
	                System.out.println(s);  
	            }  
	            sc.close();  
	        } catch (FileNotFoundException e) {  
	            System.out.println("error");  
	            e.printStackTrace();  
	        }  
	    }  
	}  

DELETE:

package project40;
import java.io.File;

public class Delete {
	  public static void main(String[] args) {   
	    File f = new File("FileOperation.txt");   
	    if (f.delete()) {   
	      System.out.println(f.getName()+ " file deleted.");  
	    } else {  
	      System.out.println("error found.");  
	    }   
	  }   
	}  

20.You are given a project to demonstrate the uses of classes, objects, and the object-oriented pillars in Java.

CLASSES AND OBJECTS:

package project40;

public class Dog { 
	    String name; 
	    String breed; 
	    int age; 
	    String color; 
	    public Dog(String name, String breed, int age, String color) 
	    { 
	        this.name = name; 
	        this.breed = breed; 
	        this.age = age; 
	        this.color = color; 
	    } 
	    public String getName() 
	    { 
	        return name; 
	    } 
	    public String getBreed() 
	    { 
	        return breed; 
	    } 
	    public int getAge() 
	    { 
	        return age; 
	    } 
	    public String getColor() 
	    { 
	        return color; 
	    } 
	    @Override
	    public String toString() 
	    { 
	        return("Hi my name is "+ this.getName()+ "breed,age and color are " + this.getBreed()+", " + this.getAge()+ ", and"+ this.getColor() + "."); 
	    } 
	    public static void main(String[] args) 
	    { 
	        Dog scott = new Dog("Scott","papillon", 5, "black"); 
	        System.out.println(scott.toString()); 
	    } 
	}



POLYMORPHISM

package project40;

public class Polymorphism {

	    public int sum(int a, int b) 
	    { 
	        return (a + b); 
	    } 
	    public int sum(int a1, int b1, int c1) 
	    { 
	        return (a1 + b1 + c1); 
	    } 
	    public double sum(double x, double y) 
	    { 
	        return (x + y); 
	    } 
	    public static void main(String args[]) 
	    { 
	        Polymorphism s = new Polymorphism(); 
	        System.out.println(s.sum(100, 210)); 
	        System.out.println(s.sum(110, 210, 310)); 
	        System.out.println(s.sum(10.5, 20.5)); 
	    } 
	}



INHERITANCE:

package project40;

public class Abstraction{
	class Bicycle  
	{ 
	    public int gear; 
	    public int speed; 
	    public Bicycle(int gear, int speed) 
	    { 
	        this.gear = gear; 
	        this.speed = speed; 
	    } 
	    public void applyBrake(int decrement) 
	    { 
	        speed -= decrement; 
	    } 
	    public void speedUp(int increment) 
	    { 
	        speed += increment; 
	    }  
	    public String toString()  
	    { 
	        return("No of gears are " + gear + "\n" + "speed of bicycle is " + speed); 
	    }  
	} 
	class MountainBike extends Bicycle  
	{ 
	    public int seatHeight; 
	    public MountainBike(int gear,int speed,int startHeight) 
	    {  
	        super(gear, speed); 
	        seatHeight = startHeight; 
	    }  
	    public void setHeight(int newValue) 
	    { 
	        seatHeight = newValue; 
	    } 
	    @Override
	    public String toString() 
	    { 
	        return (super.toString()+ 
	                "\nseat height is "+seatHeight); 
	    } 
	}
	public class Test  
	{ 
	    public void main(String args[])  
	    { 
	        MountainBike mb = new MountainBike(3, 100, 25); 
	        System.out.println(mb.toString());
	    } 
	}
}

	
ENCAPSULATION:

package project40;

public class ENCAPSULATION {
	    private String Name; 
	    private int Roll; 
	    private int Age;
	    public int getAge()  
	    { 
	      return Age; 
	    } 
	    public String getName()  
	    { 
	      return Name; 
	    } 
	    public int getRoll()  
	    { 
	       return Roll; 
	    } 
	    public void setAge( int newAge) 
	    { 
	      Age = newAge; 
	    } 
	    public void setName(String newName) 
	    { 
	      Name = newName; 
	    } 
	    public void setRoll( int newRoll)  
	    { 
	      Roll = newRoll; 
	    } 
	}
	class TestEncapsulation 
	{     
	    public static void main (String[] args)  
	    { 
	        ENCAPSULATION obj = new ENCAPSULATION(); 
	        obj.setName("Harsh"); 
	        obj.setAge(19); 
	        obj.setRoll(51); 
	        System.out.println("My name: " + obj.getName()); 
	        System.out.println("My age: " + obj.getAge()); 
	        System.out.println("My roll: " + obj.getRoll());      
	    } 
	}


ABSTRACTION:

package project40;

public class ABSTRACTION {
	
	    String color; 
	    double area() {
			return 0;
		} 
	    public String toString() {
			return null;
		} 
	    public ABSTRACTION(String color) 
	    { 
	        System.out.println("Shape constructor called"); 
	        this.color = color; 
	    } 
	    public String getColor() 
	    { 
	        return color; 
	    } 
	} 
	class Circle extends ABSTRACTION 
	{ 
	    double radius; 
	    public Circle(String color,double radius) 
	    { 
	        super(color); 
	        System.out.println("Circle constructor called"); 
	        this.radius = radius; 
	    }
	    @Override
	    double area() 
	    { 
	        return Math.PI * Math.pow(radius, 2); 
	    } 
	    @Override
	    public String toString() 
	    { 
	        return "Circle color is " + super.color + "and area is : " + area(); 
	    } 
	} 
	class Rectangle extends ABSTRACTION
	{ 
	    double length; 
	    double width; 
	    public Rectangle(String color,double length,double width) 
	    { 
	        super(color); 
	        System.out.println("Rectangle constructor called"); 
	        this.length = length; 
	        this.width = width; 
	    } 
	    @Override
	    double area() 
	    { 
	        return length*width; 
	    } 
	    @Override
	    public String toString() 
	    { 
	        return "Rectangle color is " + super.color +  
	                           "and area is : " + area(); 
	    } 
	} 
	class Test  
	{ 
	    public static void main(String[] args) 
	    { 
	        ABSTRACTION s1 = new Circle("Red", 2.2); 
	        ABSTRACTION s2 = new Rectangle("Yellow", 2, 4);
	        System.out.println(s1.toString()); 
	        System.out.println(s2.toString()); 
	    } 
	}


21. You are given a project to work and resolve the diamond problem using OOPs concepts.

interface First 
{  
    default void show() 
    { 
        System.out.println("Default First"); 
    } 
} 
interface Second 
{  
    default void show() 
    { 
        System.out.println("Default Second"); 
    } 
}  
public class TestClass implements First, Second 
{  
    public void show() 
    {  
        First.super.show(); 
        Second.super.show(); 
    } 
    public static void main(String args[]) 
    { 
        TestClass ob = new TestClass(); 
        ob.show(); 
    } 
}


22. Write a program to read, write, and append a file.
 READ:

package project40;
import java.io.File;
import java.io.FileNotFoundException; 
import java.util.Scanner; 


public class ReadF {
	
	  public static void main(String[] args) {
	    try {
	      File f = new File("filename.txt");
	      Scanner sc = new Scanner(f);
	      while (sc.hasNextLine()) {
	        String data = sc.nextLine();
	        System.out.println(data);
	      }
	      sc.close();
	    } catch (FileNotFoundException e) {
	      System.out.println("An error occurred.");
	      e.printStackTrace();
	    }
	  }
	}

WRITE:

package project40;
import java.io.FileWriter;  
import java.io.IOException;

public class WriteF {
	
	  public static void main(String[] args) {
	    try {
	      FileWriter f = new FileWriter("filename.txt");
	      f.write("Files");
	      f.close();
	      System.out.println("Successfully implemented.");
	    } catch (IOException e) {
	      System.out.println(" error");
	      e.printStackTrace();
	    }
	  }
	}
	
APPEND:

package project40;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;

public class AppendF {
	

	    public static void main(String[] args) {

	        String s1= System.getProperty("user.dir") + "test.txt";
	        String s2 = "Added text";

	        try {
	            Files.write(Paths.get(s1), s2.getBytes(), StandardOpenOption.APPEND);
	        } catch (IOException e) {
	        }
	    }
}

23. Write a program to demonstrate array rotation.

package project40;

public class Rotate {
	  
		 public static void main(String[] args) {    
		          
		        int [] arr = new int [] {1, 2, 3, 4, 5};     
	  
		        int n = 2;    
		            
		        System.out.println("array: ");    
		        for (int i = 0; i < arr.length; i++) {     
		            System.out.print(arr[i] + " ");     
		        }      
		            
		   
		        for(int i = 0; i < n; i++){    
		            int j, last;    
		     
		            last = arr[arr.length-1];    
		            
		            for(j = arr.length-1; j > 0; j--){    
		          
		                arr[j] = arr[j-1];    
		            }    
		            
		            arr[0] = last;    
		        }    
		        
		        System.out.println();    
		              
		        System.out.println("rotation: ");    
		        for(int i = 0; i< arr.length; i++){    
		            System.out.print(arr[i] + " ");    
		        }    
		    }    
		}    

24. Write a program to demonstrate the order statistics.

package project40;

public class Statistics{
	int Statistics(int arr[], int l, int r, int k) 
	    	{ 
	             		if (k > 0 && k <= r - l + 1) 
	        		{ 
	            			int pos = randomPartition(arr, l, r); 
	            			if (pos-l == k-1) 
	                			return arr[pos]; 
	            			if (pos-l > k-1) 
	                			return Statistics(arr, l, pos-1, k); 
	            			return Statistics(arr, pos+1, r, k-pos+l-1); 
	        		} 
	        return Integer.MAX_VALUE; 
	    } 
	    void swap(int arr[], int i, int j) 
	    { 
	        int temp = arr[i]; 
	        arr[i] = arr[j]; 
	        arr[j] = temp; 
	    } 
	    int partition(int arr[], int l, int r) 
	    { 
	        int x = arr[r], i = l; 
	        for (int j = l; j <= r - 1; j++) 
	        { 
	            if (arr[j] <= x) 
	            { 
	                swap(arr, i, j); 
	                i++; 
	            } 
	        } 
	        swap(arr, i, r); 
	        return i; 
	    } 
	    int randomPartition(int arr[], int l, int r) 
	    { 
	        int n = r-l+1; 
	        int pivot = (int)(Math.random()) * (n-1); 
	        swap(arr, l + pivot, r); 
	        return partition(arr, l, r); 
	    } 
	}  
	 public class Main
	{
		public static void main(String[] args) {
			Statistics ob = new Statistics(); 
	        int arr[] = {12, 3, 5, 7, 4, 19, 26}; 
	        int n = arr.length,k = 4; 
	        System.out.println("K'th smallest element is "+ ob.Statistics(arr, 0, n-1, k)); 
	    }
	}



25. Write a program to demonstrate range queries.

package project40;

public class Range {
  
	    static void findProduct(long[] arr, int[] lower, int[] upper, long prod)
	    {
	        int n = arr.length;
	        long[] preProd = new long[n];
	        int[] countZeros = new int[n];
	 
	   
	        int count = 0;
	        for (int i = 0; i < n; i++) {
	 
	        
	            if (arr[i] == 0)
	            	count++;
	            else
	                prod *= arr[i];
	
	            preProd[i] = prod;
	 
	      
	            countZeros[i] = count;
	        }
	 
	   
	        for (int i = 0; i < lower.length; i++) {
	            int l = lower[i];
	            int u = upper[i];
	 
	      
	            if (l == 1)
	            {
	           
	                if (countZeros[u - 1] == 0)
	                    System.out.println(preProd[u - 1]);
	                else
	                    System.out.println(0);
	            }
	            
	            else 
	            {
	       
	                if (countZeros[u - 1] - countZeros[l - 2] == 0)
	                    System.out.println(preProd[u - 1] / preProd[l - 2]);
	 
	                else 
	                    System.out.println(0);
	            }
	        }
	    }
	 
	    public static void main(String[] args)
	    {
	        long[] arr = new long[] { 0, 2, 3, 4, 5 };
	        int[] lower = {1, 2};
	        int[] upper = {3, 2};    
	        findProduct(arr, lower, upper, 0);
	    }
	}


26. Write a program to demonstrate working of matrices.

package project40;

public class Matrices {
  
		public static void main(String args[]){  
		int a[][]={{1,3,4},{2,4,3},{3,4,5}};    
		int b[][]={{1,3,4},{2,4,3},{1,2,4}};     
		int c[][]=new int[3][3];
		    
		for(int i=0;i<3;i++){    
		for(int j=0;j<3;j++){    
		c[i][j]=a[i][j]+b[i][j];  
		System.out.print(c[i][j]+" ");    
		}    
		System.out.println();  
		}    
		}
}


27. Write a program to create and perform operations on the singly linked list.

package project40;
import java.util.Arrays;


public class SInglyLinked { 
  class Node{  
      int data;  
      Node next;  
        
      public Node(int data) {  
          this.data = data;  
          this.next = null;  
      }  
  }
  public Node head = null;  
  public Node tail = null;  
   
  public void addNode(int data) {  
      
      Node newNode = new Node(data);  
      if(head == null) {  
       
          head = newNode;  
          tail = newNode;  
      }  
      else {  
        
          tail.next = newNode; 
         
          tail = newNode;  
      }  
  }  
   
  public void display() {  
     
      Node current = head;  
        
      if(head == null) {  
          System.out.println("List is empty");  
          return;  
      }  
      System.out.println("Nodes of singly linked list: ");  
      while(current != null) {  
       
          System.out.print(current.data + " ");  
          current = current.next;  
      }  
      System.out.println();  
  }  
    
  public static void main(String[] args) {  
        
      SInglyLinked sList = new SInglyLinked();  
        
      //Add nodes to the list  
      sList.addNode(1);  
      sList.addNode(2);  
      sList.addNode(3);  
      sList.addNode(4);  
        
      //Displays the nodes present in the list  
      sList.display();  
  }  
}  
	

28. "Write a program to create and perform operations on the circular linked list.

package project40;

public class CircularList{
	    	static class Node 
	    	{ 
	  		int data; 
	        		Node next; 
	                	Node(int d) 
	        		{ 
	            			data = d; 
	            			next = null; 
	        		} 
	}
	Node head; 
	CircularList()   
	{ 
	head = null; 
	} 
	    	void sortedInsert(Node new_node) 
	    	{ 
	        		Node current = head; 
	if (current == null) 
	        		{ 
	            			new_node.next = new_node; 
	            			head = new_node; 
	  		} 
	else if (current.data >= new_node.data) 
	        		{ 
	while (current.next != head) 
	                			current = current.next; 
	  		 	current.next = new_node; 
	            			new_node.next = head; 
	            			head = new_node; 
	        		} 
	        		else
	        		{
	while (current.next != head && current.next.data < new_node.data) 
	                			current = current.next; 
	  			new_node.next = current.next; 
	            			current.next = new_node; 
	        		} 
		}
	void printList() 
	    	{ 
	        		if (head != null) 
	       		{ 
	            			Node temp = head; 
	            			do
	           			{ 
	                			System.out.print(temp.data + " "); 
	                			temp = temp.next; 
	            			}  while (temp != head); 
	        		} 
	    	}
	public static void main(String[] args) 
	    	{ 
	        		CircularList list = new CircularList(); 
	        		int arr[] = new int[] {12, 56, 2, 11, 1, 90}; 
	        		Node temp = null; 
	        		for (int i = 0; i < 6; i++) 
	        		{ 
	           			temp = new Node(arr[i]); 
	            			list.sortedInsert(temp); 
	        		} 
	list.printList(); 
	    	}		 
	}


29. Write a program to create and perform operations on the doubly linked list.

package project40;

public class DoublyList {

	    	Node head; 
	class Node 
	{ 
	   int data;
	   Node prev; 
	   Node next; 
	Node(int d) 
	{ 
	data = d; 
	} 
	    	}
	public void push(int new_data) 
	    	{ 
	Node new_Node = new Node(new_data); 
	new_Node.next = head; 
	        		new_Node.prev = null; 
	if (head != null) 
	            			head.prev = new_Node; 
	head = new_Node; 
	    	} 
	public void InsertAfter(Node prev_Node, int new_data) 
	    	{ 
	if (prev_Node == null) 
	{ 
	            			System.out.println("previous node cannot be NULL "); 
	            			return; 
	        		} 	
	Node new_node = new Node(new_data); 
	new_node.next = prev_Node.next; 
	prev_Node.next = new_node; 
	new_node.prev = prev_Node; 
	if (new_node.next != null) 
	            			new_node.next.prev = new_node; 
	    	} 
	    	void append(int new_data) 
	    	{ 
	Node new_node = new Node(new_data); 
	  		Node last = head; 
	new_node.next = null;
	if (head == null) 
	{ 
	            			new_node.prev = null; 
	            			head = new_node; 
	            			return; 
	        		} 
	while (last.next != null) 
	            			last = last.next; 
	last.next = new_node; 
	new_node.prev = last; 
	    	} 
	public void printlist(Node node) 
	    	{ 
	        		Node last = null; 
	        		System.out.println("Traversal in forward Direction"); 
	        		while (node != null) 
	{ 
	            			System.out.print(node.data + " "); 
	            			last = node; 
	            			node = node.next; 
	        		} 
	        		System.out.println(); 
	        		System.out.println("Traversal in reverse direction"); 
	        		while (last != null) 
	{ 
	            			System.out.print(last.data + " "); 
	            			last = last.prev; 
	        		} 
	    	}
	public static void main(String[] args) 
	    	{
DoublyList dll = new DoublyList();
	dll.append(6); 
	dll.push(7);
	dll.push(1); 
	dll.append(4); 
	dll.InsertAfter(dll.head.next, 8); 
	  		System.out.println("Created DLL is: "); 
	        		dll.printlist(dll.head); 
	    	} 
	} 



30. Write a program to perform operations on a stack.


package project40;

public class Stack {
	
		  private int arr[];
		  
		  private int top;
		 
		  private int capacity;
		  Stack(int size) {
		    
		    arr = new int[size];
		    capacity = size;
		    top = -1;
		  }

		  
		  public void push(int x) {
		    if (isFull()) {
		      System.out.println("Stack OverFlow");

		      System.exit(1);
		    }

		    System.out.println("Inserting " + x);
		    arr[++top] = x;
		  }
		  public int pop() {

		 
		    if (isEmpty()) {
		      System.out.println("STACK EMPTY");
		    
		      System.exit(1);
		    }


		    return arr[top--];
		  }
		  
		  public int getSize() {
		    return top + 1;
		  }
		  
		  public Boolean isEmpty() {
		    return top == -1;
		  }
		  public Boolean isFull() {
		    return top == capacity - 1;
		  }

		  
		  public void printStack() {
		    for (int i = 0; i <= top; i++) {
		      System.out.print(arr[i] + ", ");
		    }
		  }

		  public static void main(String[] args) {
		    Stack stack = new Stack(5);

		    stack.push(1);
		    stack.push(2);
		    stack.push(3);

		    System.out.print("Stack: ");
		    stack.printStack();

		   
		    stack.pop();
		    System.out.println("\nAfter popping out");
		    stack.printStack();

		  }
		}


31.  Write a program to demonstrate working of a queue.

package project40;

public class Queue {
	      
	    private static int front, rear, capacity;   
	    private static int queue[];   
	     
	    Queue(int size) {   
	        front = rear = 0;   
	        capacity = size;   
	        queue = new int[capacity];   
	    }   
	     
	   
	    static void queueEnqueue(int item)  {   
	       
	        if (capacity == rear) {   
	            System.out.printf("\nQueue is full\n");   
	            return;   
	        }   
	     
	      
	        else {   
	            queue[rear] = item;   
	            rear++;   
	        }   
	        return;   
	    }   
	     
	
	    static void queueDequeue()  {   
	    
	        if (front == rear) {   
	            System.out.printf("\nQueue is empty\n");   
	            return;   
	        }   
	     
	     
	        else {   
	            for (int i = 0; i < rear - 1; i++) {   
	                queue[i] = queue[i + 1];   
	            }   
	     
	         
	   
	            if (rear < capacity)   
	                queue[rear] = 0;   
	     
	          
	            rear--;   
	        }   
	        return;   
	    }   
	     
	    
	    static void queueDisplay()   
	    {   
	        int i;   
	        if (front == rear) {   
	            System.out.printf("Queue is Empty\n");   
	            return;   
	        }   
	     
	     
	        for (i = front; i < rear; i++) {   
	            System.out.printf(" %d , ", queue[i]);   
	        }   
	        return;   
	    }   
	     
	    
	    static void queueFront()   
	    {   
	        if (front == rear) {   
	            System.out.printf("Queue is Empty\n");   
	            return;   
	        }   
	        System.out.printf("\nFront Element of the queue: %d", queue[front]);   
	        return;   
	    }   
	}   
	   
 class QueueArrayImplementation {  
	    public static void main(String[] args) {   
	     
	        Queue q = new Queue(4);   
	     
	        System.out.println("Initial Queue:");  
	  
	        q.queueDisplay();   
	     
	  
	        q.queueEnqueue(10);   
	        q.queueEnqueue(30);   
	        q.queueEnqueue(50);   
	        q.queueEnqueue(70);   
	     
	         
	        System.out.println("Queue after Enqueue Operation:");  
	        q.queueDisplay();   
	     
	      
	        q.queueFront();   
	           
	       
	        q.queueEnqueue(90);   
	     
	       
	        q.queueDisplay();   
	     
	        q.queueDequeue();   
	        q.queueDequeue();   
	        System.out.printf("\nQueue after two dequeue operations:");   
	     
	   
	        q.queueDisplay();   
	     
	       
	        q.queueFront();   
	    }   
	}  

32. As a developer, you are given a project to find out the longest increasing subsequence.

package project40;

public class Sequence {
	
		static int max_ref; 

		static int _lis(int arr[], int a)
		{

			if (a == 1)
				return 1;

			int res, max_ending_here = 1;

			
			for (int i = 1; i < a; i++) {
				res = _lis(arr, i);
				if (arr[i - 1] < arr[a - 1]
					&& res + 1 > max_ending_here)
					max_ending_here = res + 1;
			}

			
			if (max_ref < max_ending_here)
				max_ref = max_ending_here;

			
			return max_ending_here;
		}

		
		static int lis(int arr[], int b)
		{
			
			max_ref = 1;

			
			_lis(arr, b);

			
			return max_ref;
		}

		
		public static void main(String args[])
		{
			int arr[] = { 10, 20, 91, 30, 21, 50, 45, 69 };
			int c = arr.length;
			System.out.println("Length " + lis(arr, c)
							+ "\n");
		}
	}


33. You are given a project to demonstrate the workflow of a linear search algorithm.

package project40;

public class LinearSearch{
	
	    public static int search(int arr[], int x)
	    {
	        int n = arr.length;
	        for (int i = 0; i < n; i++) 
	        {
	            if (arr[i] == x)
	                return i;
	        }
	        return -1;
	    }

	    // Driver code
	    public static void main(String args[])
	    {
	        int arr[] = { 2, 3, 4, 10, 40 };
	        int x = 10;
	        int result = search(arr, x);
	        if (result == -1)
	            System.out.print(
	                "Element is not present in array");
	        else
	            System.out.print("Element is present at index "
	                             + result);
	    }
	}

34. You are given a project to demonstrate the workflow of a binary search algorithm.

package project40;

public class BinarySearch {
	    int binarySearch(int arr[], int l, int r, int x)
	    {
	        if (r >= l) {
	            int mid = l + (r - l) / 2;
	            if (arr[mid] == x)
	                return mid;

	      
	            if (arr[mid] > x)
	                return binarySearch(arr, l, mid - 1, x);
	            return binarySearch(arr, mid + 1, r, x);
	        }

	    
	        return -1;
	    }

	    public static void main(String args[])
	    {
	        BinarySearch ob = new BinarySearch();
	        int arr[] = { 2, 3, 4, 10, 40 };
	        int n = arr.length;
	        int x = 10;
	        int result = ob.binarySearch(arr, 0, n - 1, x);
	        if (result == -1)
	            System.out.println("Element not present");
	        else
	            System.out.println("Element found at index " + result);
	    }
	}



35. "You are given a project to demonstrate the workflow of an exponential search algorithm.

package project40;

import java.util.Arrays;



public class ExponentialSearch {


		public static void main(String[] args) {
			

			int[] arr = {6,12,18,24,32};
		    int length= arr.length;
		    int value = 18;
		    int outcome = exponentialSearch(arr,length,value);

		    if(outcome<0) {
		       System.out.println( "Element is not present in the array");
		    }
		    else {
		    	System.out.println( "Element is  present in the array at index :"+outcome);
		    }
		        }

		 public static int exponentialSearch(int[] arr ,int length, int value ){

		        if(arr[0]==value) {
		            return 0;
		            }
		        int i=1;
		        while(i<length && arr[i]<=value) {
		            i=i*2;
		        }
		        return Arrays.binarySearch(arr,i/2,Math.min(i,length),value);
		}

	}


36.  You are given a project to demonstrate the workflow of a selection sort algorithm.

package project40;

public class SelectionSort {

		public static void main(String[] args) {
			
			  
			int[] arr = {9,6,3,1,2,4,5};
			int length = arr.length;
			selectionSort(arr);
			System.out.println("The sorted elements are:");
			for(int i:arr) {
				System.out.println(i);
			}
			         }

			    public static void selectionSort(int[] arr) {

			        for(int i=0;i<arr.length-1;i++) {
			        	int index =i;
			            for(int j=i+1;j<arr.length;j++) {
			                if(arr[j]<arr[index]) {
			                    index =j;
			                }
			            }
			            int smallNumber = arr[index];
			            arr[index]= arr[i];
			            arr[i]= smallNumber;
		}
			    }
	}


37. You are given a project to demonstrate the workflow of a bubble sort algorithm.
package project40;

public class BubbleSort {

		public static void main(String[] args) {
		
			
			int[] arr= {25,20,15,5,10};
		     bubbleSort(arr);
		     for(int i=0;i<arr.length;i++) {
		        System.out.println(arr[i]);
		        }
		    }

		    public static void bubbleSort(int[] arr){
		        int len = arr.length;
		        int temp = 0;
		        for(int i=0;i<len;i++){
		            for (int j=1;j<(len);j++){
		            	  if(arr[j-1]>arr[j]){
		                      temp = arr[j-1];
		                      arr[j-1]= arr[j];
		                      arr[j]= temp;

		                      }
		                  }
		              }
		          }
		      }


38.  "
You are given a project to demonstrate the workflow of an insertion sort algorithm.

package project40;

public class InsertionSort {


		public static void main(String[] args) {
		

			int[] arr = {9,12,3,21,44};
	        insertionSort(arr);
	        for(int i=0;i<arr.length;i++){

	            System.out.println(arr[i]);
	        }
	     }
	    public static void insertionSort(int[] arr) {

	    int len = arr.length;
	    for(int j=1;j<len;j++){
	    int key = arr[j];
	    int i=j-1;
	    while ((i>-1) && (arr[i]>key)){
	        arr[i+1]=arr[i];
	        i--;
	    }
	    arr[i+1]=key;
	         }

	    }
	}

39. You are given a project to demonstrate the workflow of a merge sort algorithm.

package project40;

public class MergeSort {
	
		void merge(int arr[], int l, int m, int r){
	   
	        int n1 = m - l + 1;
	        int n2 = r - m;

	       
	        int L[] = new int [n1];
	        int R[] = new int [n2];

	    
	        for (int i=0; i<n1; ++i)
	            L[i] = arr[l + i];
	        for (int j=0; j<n2; ++j)
	        	  R[j] = arr[m + 1+ j];



	        int i = 0, j = 0;
	        int k = l;
	        while (i < n1 && j < n2) {
	            if (L[i] <= R[j]){
	                arr[k] = L[i];
	                i++;
	            }
	            else {
	                arr[k] = R[j];
	                j++;
	            }
	            k++;
	        }
	        while (i < n1) {
	            arr[k] = L[i];
	            i++;
	            k++;
	        }

	        
	        while (j < n2) {
	            arr[k] = R[j];
	            j++;
	            k++;
	        }
	    }
	    void sort(int arr[], int l, int r) {
	        if (l < r)
	        {
	            int m = (l+r)/2;
	            sort(arr, l, m);
	            sort(arr , m+1, r);
	            merge(arr, l, m, r);
	        }
	    }

	        static void printArray(int arr[]) {
	        int n = arr.length;
	        for (int i=0; i<n; ++i)
	            System.out.print(arr[i] + " ");
	        System.out.println();
	    }

	    
		public static void main(String[] args) {
				int arr[] = {12, 11, 13, 5, 6, 7};

		        System.out.println("Given Array");
		        printArray(arr);

		        MergeSort ob = new MergeSort();
		        ob.sort(arr, 0, arr.length-1);

		        System.out.println("\nSorted array");
		        printArray(arr);
		}

	}


40. You are given a project to demonstrate the workflow of a quick sort algorithm.

package project40;

public class QuickSort {

		
		int partition(int arr[], int low, int high) {
	        int pivot = arr[high];
	        int i = (low-1);
	        for (int j=low; j<high; j++) { 
	            if (arr[j] <= pivot) {
	                i++;
	                
	                int temp = arr[i];
	                arr[i] = arr[j];
	                arr[j] = temp;
	            }
	        }

	       
	        int temp = arr[i+1];
	        arr[i+1] = arr[high];
	        arr[high] = temp;

	        return i+1;
	    }

	    void sort(int arr[], int low, int high) {
	        if (low < high) {
	            int pi = partition(arr, low, high);
	            sort(arr, low, pi-1);
	            sort(arr, pi+1, high);
	        }
	    }
	    static void printArray(int arr[]) {
	        int n = arr.length;
	        for (int i=0; i<n; ++i)
	            System.out.print(arr[i]+" ");
	        System.out.println();
	    }

	   
		public static void main(String[] args) {
		

			int arr[] = {10, 7, 8, 9, 1, 5};
	        int n = arr.length;

	        QuickSort ob = new QuickSort();
	        ob.sort(arr, 0, n-1);

	        System.out.println("sorted array");
	        printArray(arr);

		}

	}


41. As a developer, you are asked to fix the bugs of the application using appropriate algorithm.

package project40;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class BugFixing {
		public static void main(String[] args) {
	        System.out.println("Hello ");
	    
	        System.out.println("\tWelcome\n");
	        
	        optionsSelection();

	    }
	    private static void optionsSelection() {
	        String[] arr = {"1. I wish to review ",
	                "2. I wish to add",
	                "3. I wish to delete ",
	                "4. I wish to sort",
	                "5. I wish to search ",
	                "6. Close the application"
	        };
	        int[] arr1 = {1,2,3,4,5,6};
	        int  slen = arr1.length;
	        for(int i=0; i<slen;i++){
	            System.out.println(arr[i]);
	         
	        }
	        ArrayList<Integer> arrlist = new ArrayList<Integer>();
	        ArrayList<Integer> expenses = new ArrayList<Integer>();
	        expenses.add(1000);
	        expenses.add(2300);
	        expenses.add(45000);
	        expenses.add(32000);
	        expenses.add(110);
	        expenses.addAll(arrlist);
	        System.out.println("\nEnter your choice:\t");
	        Scanner sc = new Scanner(System.in);
	        int  options =  sc.nextInt();
	        for(int j=1;j<=slen;j++){
	            if(options==j){
	                switch (options){
	                    case 1:
	                        System.out.println(" saved expenses: \n");
	                        System.out.println(expenses+"\n");
	                        optionsSelection();
	                        break;
	                    case 2:
	                        System.out.println("add your Expense: \n");
	                        int value = sc.nextInt();
	                        expenses.add(value);
	                        System.out.println(" value is updated\n");
	                        expenses.addAll(arrlist);
	                        System.out.println(expenses+"\n");
	                        optionsSelection();

	                        break;
	                    case 3:
	                        System.out.println("Confirm by selecting the same option...\n");
	                        int con_choice = sc.nextInt();
	                        if(con_choice==options){
	                               expenses.clear();
	                            System.out.println(expenses+"\n");
	                            System.out.println("expenses are erased!\n");
	                        } else {
	                            System.out.println("try again!");
	                        }
	                        optionsSelection();
	                        break;
	                    case 4:
	                        sortExpenses(expenses);
	                        optionsSelection();
	                        break;
	                    case 5:
	                        searchExpenses(expenses);
	                        optionsSelection();
	                        break;
	                    case 6:
	                        closeApp();
	                        break;
	                    default:
	                        System.out.println("You have made an invalid choice!");
	                        break;
	                }
	            }
	        }

	    }
	    private static void closeApp() {
	        System.out.println("Thank you!");
	            }
	    private static void searchExpenses(ArrayList<Integer> arrayList) {
	        int leng = arrayList.size();
	        System.out.println("Enter the expense:\t");
	       
	        Scanner sc = new Scanner(System.in);
	        int input = sc.nextInt();
	    
	        for(int i=0;i<leng;i++) {
	        	if(arrayList.get(i)==input) {
	        		System.out.println("Found the expense " + input + " at " + i + " position");
	        	}
	        }
	    }
	    private static void sortExpenses(ArrayList<Integer> arrayList) {
	        int arrlength =  arrayList.size();
	     
	        
	        Collections.sort(arrayList);
	        System.out.println("Sorted expenses: ");
	        for(Integer i: arrayList) {
	        	System.out.print(i + " ");
	        }
	        
	 
	       
	    }
	}

*****************************************************************************************************************************************************************************





















